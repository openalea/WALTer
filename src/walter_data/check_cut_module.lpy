from __future__ import print_function
from openalea.lpy import Lsystem

fake_rule = """
Fake:
  produce Fake"""

module Internode
module Leaf
module Bud
module Apex
module TillerApex
module CutPoint

iter = 0

def StartEach(lstring):
  global iter
  iter += 1

def EndEach(lstring, lscene):
  print("iter : ",iter)
  if lscene:
    print( 'all sid in lscene should be Internode:')
    for sid in lscene.todict():
      print ('sid: ' + str(sid))
      if sid in range(len(lstring)):
        print( lstring[sid].name)
      else:
        print( 'sid ' + str(sid) + ' found in lscene, but not in lstring')
  fake_lsys = Lsystem()
  fake_lsys.addRule(fake_rule)
  fake_lsys.axiom = lstring
  new_lstring = fake_lsys.iterate()
  if lscene:
    print( 'Scanning lstring after fake rule:')
    for sid in lscene.todict():
      print( 'sid: ' + str(sid))
      if sid in range(len(new_lstring)):
        print( new_lstring[sid].name)
      else:
        print( 'sid ' + str(sid) + ' found in lscene, but not in lstring')

Axiom: Apex

derivation length: 2

production:
Apex:
  produce [CutPointBud]Internode[Leaf]Apex

Bud:
  produce Internode[Leaf]TillerApex

TillerApex:
  produce Internode[Leaf]TillerApex

CutPoint:
  if iter == 2:
    produce % CutPoint
  else: 
    produce CutPoint

interpretation:


Internode:
  produce F(1)

endlsystem
